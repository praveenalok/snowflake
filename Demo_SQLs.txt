// CREATE SCHEMA:
--create schema PKV_DEMO;

// CREATE EMPLOYEE_STG TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_STG (
EMPLOYEE_ID VARCHAR,
LOAD_DT DATE,
LOCATION_CODE VARCHAR,
LOCATION_NAME VARCHAR,
SALARY_AMOUNT INTEGER,
SALARY_CURRENCY VARCHAR);

// CREATE EMPLOYEE_HUB TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_HUB (
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
LOAD_DT DATE);

// CREATE EMPLOYEE_LOCATION_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT (
EMPLOYEE_LOCATION_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
LOCATION_CODE VARCHAR,
LOCATION_NAME VARCHAR,
LOAD_DT DATE);

// CREATE EMPLOYEE_SALARY_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_SALARY_SAT (
EMPLOYEE_SALARY_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
SALARY_AMOUNT INTEGER,
SALARY_CURRENCY VARCHAR,
LOAD_DT DATE);

--=========================================================================---

// CREATE METADATA TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.VAULT_METADATA_TABLE (
LOAD_TABLE VARCHAR,
TABLE_TGT VARCHAR,
TABLE_SRC VARCHAR,
TABLE_TYP VARCHAR,
TABLE_SQL VARCHAR,
LOAD_FLAG VARCHAR);

// CREATE SEQUENCE FOR LOGGING:
CREATE OR REPLACE SEQUENCE PKV_DEMO.VAULT_LOG_SEQ START = 1 INCREMENT = 1;
//CREATE LOG TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.VAULT_LOG_TABLE (
LOG_ID INTEGER,
LOAD_TABLE VARCHAR,
LOG_MSG VARCHAR,
IMPACTED_COUNT VARCHAR,
LOG_FLAG VARCHAR,
LOG_TS TIMESTAMP);

--=========================================================================---

// METADATA INSERTS:
INSERT INTO PKV_DEMO.VAULT_METADATA_TABLE VALUES
('EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_STG', 'HUB',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM PKV_DEMO.EMPLOYEE_HUB TGT
  WHERE TGT.EMPLOYEE_ID_HASHKEY = EMPLOYEE_ID_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_HUB (EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT)
  VALUES (EMPLOYEE_ID_HASHKEY_SRC, EMPLOYEE_ID, LOAD_DT )
  SELECT DISTINCT
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY_SRC,
  EMPLOYEE_ID,
  LOAD_DT
  FROM PKV_DEMO.EMPLOYEE_STG ',
 'Y'),
 
 ('EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_LOCATION_HASHKEY,
  NVL(LEAD(EMPLOYEE_LOCATION_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY ORDER BY LOAD_DT),EMPLOYEE_LOCATION_HASHKEY) AS EMPLOYEE_LOCATION_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT) TGT
  WHERE TGT.EMPLOYEE_LOCATION_HASHKEY = EMPLOYEE_LOCATION_HASHKEY_SRC AND TGT.EMPLOYEE_LOCATION_HASHKEY_PREV = EMPLOYEE_LOCATION_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_LOCATION_SAT (EMPLOYEE_LOCATION_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT)
  VALUES (EMPLOYEE_LOCATION_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT )
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(LOCATION_CODE), ''''), ''^'', NVL(UPPER(LOCATION_NAME), ''''))) AS EMPLOYEE_LOCATION_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  LOCATION_CODE,
  LOCATION_NAME,
  LOAD_DT
  FROM PKV_DEMO.EMPLOYEE_STG ',
 'Y'),
 
  ('EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_SALARY_HASHKEY,
  NVL(LEAD(EMPLOYEE_SALARY_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY ORDER BY LOAD_DT),EMPLOYEE_SALARY_HASHKEY) AS EMPLOYEE_SALARY_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_SALARY_SAT) TGT
  WHERE TGT.EMPLOYEE_SALARY_HASHKEY = EMPLOYEE_SALARY_HASHKEY_SRC AND TGT.EMPLOYEE_SALARY_HASHKEY_PREV = EMPLOYEE_SALARY_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_SALARY_SAT (EMPLOYEE_SALARY_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT)
  VALUES (EMPLOYEE_SALARY_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT )
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(SALARY_AMOUNT), ''''), ''^'', NVL(UPPER(SALARY_CURRENCY), ''''))) AS EMPLOYEE_SALARY_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  SALARY_AMOUNT,
  SALARY_CURRENCY,
  LOAD_DT
  FROM PKV_DEMO.EMPLOYEE_STG ',
 'Y'),
 
('EMPLOYEE_PIT', 'PKV_DEMO.EMPLOYEE_PIT', 'PKV_DEMO.EMPLOYEE_STG', 'PIT',
 ' INSERT INTO PKV_DEMO.EMPLOYEE_PIT
(EMPLOYEE_ID_HASHKEY,
 EMPLOYEE_ID,
 PIT_EFF_DT,
 PIT_END_DT,
 EMPLOYEE_LOCATION_LOAD_DT,
 EMPLOYEE_SALARY_LOAD_DT)
 WITH LOAD_DATES AS (
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT)
 SELECT
 LD.EMPLOYEE_ID_HASHKEY,
 LD.EMPLOYEE_ID,
 LD.LOAD_DT AS PIT_EFF_DT,
 LEAD(LD.LOAD_DT) OVER  (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS PIT_END_DT,
 MAX(S1.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_LOCATION_LOAD_DT,
 MAX(S2.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_SALARY_LOAD_DT
 FROM LOAD_DATES LD
 LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = LD.LOAD_DT)
 LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = LD.LOAD_DT) ',
 'Y') ;
 
SELECT * FROM PKV_DEMO.VAULT_METADATA_TABLE;

--=========================================================================---

// REUSABLE PROCEDURE:
CREATE OR REPLACE PROCEDURE PKV_DEMO.VAULT_LOAD_PROC (LOAD_TABLE VARCHAR)
    returns string
    language javascript
    strict
    execute as CALLER
    as
    $$
/*
    Date Created: Dec 31 2020
    Created by: Praveen K Verma
    Description: 
    This Procedure will perform the data load in SnowFlake tables and capture the log steps with stats
    Log entries and Load stats can be found in table PKV_DEMO.vault_log_table
    Metadata entries can be found in table PKV_DEMO.vault_metadata_table
*/

// Check if load_table entry exist in metadata table:
  sql_cmd = " SELECT COUNT (*) FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "'";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue(1);
      if (row_count == 0)
      {
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'ERROR: No entry for " +LOAD_TABLE+ " in PKV_DEMO.VAULT_METADATA_TABLE', 'N/A', 'E', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      }

// Get the details from metadata table based on load_table name:
  sql_cmd = " SELECT DISTINCT TABLE_TGT, TABLE_SRC, UPPER(TABLE_TYP) AS TABLE_TYP, TABLE_SQL, UPPER(LOAD_FLAG) AS LOAD_FLAG FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "'" ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var TABLE_TGT = rs.getColumnValue (1);
  var TABLE_SRC = rs.getColumnValue (2);
  var TABLE_TYP = rs.getColumnValue (3);
  var TABLE_SQL = rs.getColumnValue (4); 
  var LOAD_FLAG = rs.getColumnValue (5);  
  
// Check if LOAD_FLAG in metadata table set to N:
  if (LOAD_FLAG == 'N')
    {
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'EXCLUDED: LOAD_FLAG in PKV_DEMO.VAULT_LOG_TABLE set to N for " +LOAD_TABLE+ ", TABLE TYPE: " +TABLE_TYP+ "' , 'N/A', 'W', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
    }
    
  else
    { 
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'SELECTED: " +LOAD_TABLE+ " for data load, TABLE TYPE: " +TABLE_TYP+ "' , 'N/A' , 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );

// Check if EMPLOYEE_ID exist in HUB table for SATTELITE table load:
if (TABLE_TYP == 'SAT')
{
  sql_cmd = " SELECT COUNT (*) FROM (SELECT DISTINCT EMPLOYEE_ID FROM " +TABLE_SRC+ " WHERE UPPER(EMPLOYEE_ID) NOT IN (SELECT UPPER(EMPLOYEE_ID) FROM PKV_DEMO.EMPLOYEE_HUB)) " ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);
if (row_count != 0)
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'WARNING: ALL or FEW EMP_ID not present in EMPLOYEE_HUB table for current load, TABLE TYPE: " +TABLE_TYP+ "' , 'Missing EMP_ID Count: " +row_count+ "', 'W', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
else
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'PASSED: ALL EMP_ID present in EMPLOYEE_HUB table for current load, TABLE TYPE: " +TABLE_TYP+ "' , 'N/A' , 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
}
else
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'N/A: EMP_ID pre-existence in EMPLOYEE_HUB table is not required for current load, TABLE TYPE: " +TABLE_TYP+ "', 'N/A', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
// Actual Data Load and Load Stats Collection:
  
try
{

// Before Load Row Count in Target Table:
sql_cmd = "SELECT COUNT (*) FROM "+TABLE_TGT+" ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var pre_load_count = rs.getColumnValue (1);
  
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'START: Data load for " +TABLE_TGT+ ", TABLE TYPE: " +TABLE_TYP+ "', 'Initial Row Count: " +pre_load_count+ "', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
  
 // Actual Data Load:
 snowflake.execute( {sqlText: TABLE_SQL} );
 
// After Load Row Count in Target Table:
sql_cmd = "SELECT COUNT (*) FROM "+TABLE_TGT+" ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var post_load_count = rs.getColumnValue (1);
  
// Net Load Row Count in Target Table:
sql_cmd = "SELECT " +post_load_count+ " - " +pre_load_count+ " ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);

      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'END: Data load for " +TABLE_TGT+ ", TABLE TYPE: " +TABLE_TYP+ "', 'Added Row Count: " +row_count+ "', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      return "Succeeded" ;
      }
      
// Error Collection:
catch (err)
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'FAIL: Data load for " +TABLE_TGT+ ", TABLE TYPE: " +TABLE_TYP+ "', 'N/A' , 'E', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );

// To Fail ControlM Job:
  sql_cmd = " SELECT COUNT (*) FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE 1=2" ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);
  
      return "Failed: " + err ;
      }
      }
      $$
      ;

---=======================================================================================================================================---

//Truncate any existing data before Day 1:
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_HUB ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_SALARY_SAT ; 

//MetaData Table Entry:
SELECT * FROM PKV_DEMO.VAULT_METADATA_TABLE ;

---=======================================================================================================================================---
---=========================       DEMO PART 1 (Advantage of having Reusable Process & Logging Steps)        ==============================---
---=======================================================================================================================================---

// CASE 1: Load Day 1 Data from Staging table to Vault tables:
// Day 1: Jan 01 2021 :: Data in Staging Layer
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD'),
('A124', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4000, 'USD'),
('A125', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 5000, 'USD');
// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID;
// Table Load Count:
SELECT 'EMPLOYEE_HUB' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_HUB UNION 
SELECT 'EMPLOYEE_LOCATION_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT UNION 
SELECT 'EMPLOYEE_SALARY_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ;
//Select statements:
SELECT * FROM PKV_DEMO.EMPLOYEE_HUB ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ; 

---=======================================================================================================================================---

// CASE 2: Reload same Day 1 data from Staging table to Vault tables, nothing 'll get loaded':
// Try Loading same data again:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;
// Table Load Count:
SELECT 'EMPLOYEE_HUB' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_HUB UNION 
SELECT 'EMPLOYEE_LOCATION_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT UNION 
SELECT 'EMPLOYEE_SALARY_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ;

---=======================================================================================================================================---

// CASE 3: Try executing Reusable Procedure for a table not having metadata entry:
// Reusable Procedure Call Statement:
--CALL PKV_DEMO.VAULT_LOAD_PROC ('TEST_TABLE');
// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;

---=======================================================================================================================================---

// CASE 4: Try executing Reusable Procedure for a table having metadata flag a N:
// Metadata Entry:
SELECT * FROM PKV_DEMO.VAULT_METADATA_TABLE;
// Update Metadata table LOAD_FLAG to N for EMPLOYEE_HUB:
UPDATE PKV_DEMO.VAULT_METADATA_TABLE SET LOAD_FLAG = 'N' WHERE LOAD_TABLE = 'EMPLOYEE_SALARY_SAT';
// Reusable Procedure Call Statement:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;
// Revert Metadata table LOAD_FLAG to Y:
UPDATE PKV_DEMO.VAULT_METADATA_TABLE SET LOAD_FLAG = 'Y' WHERE LOAD_TABLE = 'EMPLOYEE_SALARY_SAT';

---=======================================================================================================================================---

// CASE 5: Try loading orphan record in SAT table:
// Truncate HUB and SAT table:
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_HUB ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
// Load SAT table without loading HUB table:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;


---=======================================================================================================================================---
---=========================       DEMO PART 2 (Incremental Load / How to read data from Vault Model)       ==============================---
---=======================================================================================================================================---

//CASE 6: Incremental Run:
//Truncate any existing data before Day 1:
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_HUB ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_SALARY_SAT ;

// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;

// Table Load Count:
SELECT 'EMPLOYEE_HUB' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_HUB UNION 
SELECT 'EMPLOYEE_LOCATION_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT UNION 
SELECT 'EMPLOYEE_SALARY_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ;

//Select statements:
SELECT * FROM PKV_DEMO.EMPLOYEE_HUB ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT  ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ; 
 
// Day 1: Jan 01 2021 :: Data in Staging Layer
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD'),
('A124', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4000, 'USD'),
('A125', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 5000, 'USD');
// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');

// Day 2: Jan 08 2021 :: Data in Staging Layer
// A123 no change, A124 change in Salary, A125 change in LOCATION, A126 new Insert
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-08-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD'),
('A124', TO_DATE('01-08-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4200, 'USD'),
('A125', TO_DATE('01-08-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 5000, 'USD'),
('A126', TO_DATE('01-08-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 6000, 'USD');
// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');

// Day 3: Jan 15 2021 :: Data in Staging Layer
// increase in salary for A124, No change for rest
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-15-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD'),
('A124', TO_DATE('01-15-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4500, 'USD'),
('A125', TO_DATE('01-15-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 5000, 'USD'),
('A126', TO_DATE('01-15-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 6000, 'USD');
// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');

---=======================================================================================================================================---

// CREATE EMPLOYEE_PIT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_PIT (
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
PIT_EFF_DT DATE,
PIT_END_DT DATE,
EMPLOYEE_LOCATION_LOAD_DT DATE, 
EMPLOYEE_SALARY_LOAD_DT DATE);

//Insert Data in PIT Table:
Truncate Table PKV_DEMO.EMPLOYEE_PIT;

INSERT INTO PKV_DEMO.EMPLOYEE_PIT
(EMPLOYEE_ID_HASHKEY,
 EMPLOYEE_ID,
 PIT_EFF_DT,
 PIT_END_DT,
 EMPLOYEE_LOCATION_LOAD_DT,
 EMPLOYEE_SALARY_LOAD_DT)
WITH LOAD_DATES AS (
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT)
SELECT DISTINCT
 LD.EMPLOYEE_ID_HASHKEY,
 LD.EMPLOYEE_ID,
 LD.LOAD_DT AS PIT_EFF_DT,
 LEAD(LD.LOAD_DT) OVER  (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS PIT_END_DT,
 MAX(S1.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_LOCATION_LOAD_DT,
 MAX(S2.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_SALARY_LOAD_DT
FROM LOAD_DATES LD
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
ON (S1.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = LD.LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
ON (S2.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = LD.LOAD_DT);

CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_PIT');

SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;

SELECT * FROM PKV_DEMO.EMPLOYEE_PIT ORDER BY 2, 3;

---=======================================================================================================================================---

//Curated View for Current Data:
CREATE OR REPLACE VIEW PKV_DEMO.V_EMPLOYEE_CURRENT AS
SELECT
 HUB.EMPLOYEE_ID,
 S1.LOCATION_CODE,
 S1.LOCATION_NAME,
 S2.SALARY_AMOUNT,
 S2.SALARY_CURRENCY
FROM PKV_DEMO.EMPLOYEE_PIT PIT
JOIN PKV_DEMO.EMPLOYEE_HUB HUB ON (HUB.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY)
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = PIT.EMPLOYEE_LOCATION_LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = PIT.EMPLOYEE_SALARY_LOAD_DT)
WHERE PIT.PIT_END_DT IS NULL;

SELECT * FROM PKV_DEMO.V_EMPLOYEE_CURRENT ORDER BY 1;

---=======================================================================================================================================---

//Curated View for History Data:
CREATE OR REPLACE VIEW PKV_DEMO.V_EMPLOYEE_HISTORY AS
SELECT
 HUB.EMPLOYEE_ID,
 PIT.PIT_EFF_DT START_DT,
 NVL(DATEADD(Day ,-1, PIT.PIT_END_DT), TO_DATE('12-31-9999', 'MM-DD-YYYY')) END_DT,
 CASE WHEN PIT.PIT_END_DT IS NULL THEN 'Y' ELSE 'N' END AS CURR_REC_IND,
 S1.LOCATION_CODE,
 S1.LOCATION_NAME,
 S2.SALARY_AMOUNT,
 S2.SALARY_CURRENCY
FROM PKV_DEMO.EMPLOYEE_PIT PIT
JOIN PKV_DEMO.EMPLOYEE_HUB HUB ON (HUB.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY)
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = PIT.EMPLOYEE_LOCATION_LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = PIT.EMPLOYEE_SALARY_LOAD_DT);
 
 SELECT * FROM PKV_DEMO.V_EMPLOYEE_HISTORY ORDER BY 1,2;
 
 
 
---=======================================================================================================================================---
---=========================    DEMO PART 3 (Get new data into existing model, No Data reload needed )      ==============================---
---=======================================================================================================================================---
 // Change in requirement, need to bring ZIP Code & Certification information in the model:
---=======================================================================================================================================---
// Day 4: Jan 22 2021 :: 
//No Change in previous existing data, started getting ZIP Code in the file
//Started getting a new file for Certification details

---=============================================================================---
// Change 1: STG layer
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
ALTER TABLE PKV_DEMO.EMPLOYEE_STG ADD ZIP_CODE VARCHAR;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD', '10001'),
('A124', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4500, 'USD', '10002'),
('A125', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 5000, 'USD', '90011'),
('A126', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'CA', 'CALIFORNIA', 6000, 'USD', '90011');

//Create a STG table to load Certification data:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_STG_Certification (
EMPLOYEE_ID VARCHAR,
LOAD_DT DATE,
Certification VARCHAR);

INSERT INTO  PKV_DEMO.EMPLOYEE_STG_Certification VALUES 
('A126', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'AWS'),
('A126', TO_DATE('01-22-2021', 'MM-DD-YYYY'), 'SNOWFLAKE');

---=============================================================================---
// Change 2: Vault Model

//CREATE EMPLOYEE_ZIP_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_ZIP_SAT (
EMPLOYEE_ZIP_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
ZIP_CODE VARCHAR,
LOAD_DT DATE);

//CREATE EMPLOYEE_Certification_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_Certification_SAT (
EMPLOYEE_Certification_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
Certification VARCHAR,
LOAD_DT DATE);


// METADATA INSERT FOR NEW TABLE:
INSERT INTO PKV_DEMO.VAULT_METADATA_TABLE VALUES
('EMPLOYEE_ZIP_SAT', 'PKV_DEMO.EMPLOYEE_ZIP_SAT', 'PKV_DEMO.EMPLOYEE_STG_ZIP', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_ZIP_HASHKEY,
  NVL(LEAD(EMPLOYEE_ZIP_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY ORDER BY LOAD_DT),EMPLOYEE_ZIP_HASHKEY) AS EMPLOYEE_ZIP_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_ZIP_SAT) TGT
  WHERE TGT.EMPLOYEE_ZIP_HASHKEY = EMPLOYEE_ZIP_HASHKEY_SRC AND TGT.EMPLOYEE_ZIP_HASHKEY_PREV = EMPLOYEE_ZIP_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_ZIP_SAT (EMPLOYEE_ZIP_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, ZIP_CODE, LOAD_DT)
  VALUES (EMPLOYEE_ZIP_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, ZIP_CODE, LOAD_DT )
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(ZIP_CODE), ''''))) AS EMPLOYEE_ZIP_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  ZIP_CODE,
  LOAD_DT
  FROM PKV_DEMO.EMPLOYEE_STG ',
 'Y'),
 
 ('EMPLOYEE_Certification_SAT', 'PKV_DEMO.EMPLOYEE_Certification_SAT', 'PKV_DEMO.EMPLOYEE_STG_Certification', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_Certification_HASHKEY,
  NVL(LEAD(EMPLOYEE_Certification_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY ORDER BY LOAD_DT),EMPLOYEE_Certification_HASHKEY) AS EMPLOYEE_Certification_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_Certification_SAT) TGT
  WHERE TGT.EMPLOYEE_Certification_HASHKEY = EMPLOYEE_Certification_HASHKEY_SRC AND TGT.EMPLOYEE_Certification_HASHKEY_PREV = EMPLOYEE_Certification_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_Certification_SAT (EMPLOYEE_Certification_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, Certification, LOAD_DT)
  VALUES (EMPLOYEE_Certification_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, Certification, LOAD_DT )
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(Certification), ''''))) AS EMPLOYEE_Certification_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  Certification,
  LOAD_DT
  FROM PKV_DEMO.EMPLOYEE_STG_Certification ',
 'Y');

// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_ZIP_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_Certification_SAT');

// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID DESC;

// Table Load Count:
SELECT 'EMPLOYEE_HUB' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_HUB UNION 
SELECT 'EMPLOYEE_LOCATION_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT UNION 
SELECT 'EMPLOYEE_SALARY_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT UNION
SELECT 'EMPLOYEE_ZIP_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_ZIP_SAT UNION
SELECT 'EMPLOYEE_Certification_SAT' AS TABLE_NAME, COUNT (*) AS ROW_COUNT FROM PKV_DEMO.EMPLOYEE_Certification_SAT;

---=============================================================================---

// Change 3: ALTER EMPLOYEE_PIT TABLE TO INCLUDE A NEW COLUMN FOR NEWLY ADDED SAT:
ALTER TABLE PKV_DEMO.EMPLOYEE_PIT ADD COLUMN EMPLOYEE_ZIP_LOAD_DT DATE ;
ALTER TABLE PKV_DEMO.EMPLOYEE_PIT ADD COLUMN EMPLOYEE_Certification_LOAD_DT DATE ;

//Insert Data in PIT Table:
Truncate Table PKV_DEMO.EMPLOYEE_PIT;

INSERT INTO PKV_DEMO.EMPLOYEE_PIT
(EMPLOYEE_ID_HASHKEY,
 EMPLOYEE_ID,
 PIT_EFF_DT,
 PIT_END_DT,
 EMPLOYEE_LOCATION_LOAD_DT,
 EMPLOYEE_SALARY_LOAD_DT,
 EMPLOYEE_ZIP_LOAD_DT,
 EMPLOYEE_Certification_LOAD_DT)
 
WITH LOAD_DATES AS (
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_ZIP_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_Certification_SAT)
SELECT
 LD.EMPLOYEE_ID_HASHKEY,
 LD.EMPLOYEE_ID,
 LD.LOAD_DT AS PIT_EFF_DT,
 LEAD(LD.LOAD_DT) OVER  (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS PIT_END_DT,
 MAX(S1.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_LOCATION_LOAD_DT,
 MAX(S2.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_SALARY_LOAD_DT,
 MAX(S3.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_ZIP_LOAD_DT,
 MAX(S4.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_Certification_LOAD_DT
FROM LOAD_DATES LD
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
ON (S1.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = LD.LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
ON (S2.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = LD.LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_ZIP_SAT S3
ON (S3.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S3.LOAD_DT = LD.LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_Certification_SAT S4
ON (S4.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S4.LOAD_DT = LD.LOAD_DT);

SELECT * FROM PKV_DEMO.EMPLOYEE_PIT ORDER BY 2, 3;

---=============================================================================---

// Change 4: Curated View for Current Data:
CREATE OR REPLACE VIEW PKV_DEMO.V_EMPLOYEE_CURRENT AS
SELECT
 HUB.EMPLOYEE_ID,
 S1.LOCATION_CODE,
 S1.LOCATION_NAME,
 S2.SALARY_AMOUNT,
 S2.SALARY_CURRENCY,
 S3.ZIP_CODE,
 S4.Certification
FROM PKV_DEMO.EMPLOYEE_PIT PIT
JOIN PKV_DEMO.EMPLOYEE_HUB HUB ON (HUB.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY)
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = PIT.EMPLOYEE_LOCATION_LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = PIT.EMPLOYEE_SALARY_LOAD_DT)
 LEFT JOIN PKV_DEMO.EMPLOYEE_ZIP_SAT S3
 ON (S3.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S3.LOAD_DT = PIT.EMPLOYEE_ZIP_LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_Certification_SAT S4
 ON (S4.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S4.LOAD_DT = PIT.EMPLOYEE_Certification_LOAD_DT)
WHERE PIT.PIT_END_DT IS NULL;

SELECT * FROM PKV_DEMO.V_EMPLOYEE_CURRENT ORDER BY 1, 2;

---=============================================================================---

// Change 5: Curated View for History Data:
CREATE OR REPLACE VIEW PKV_DEMO.V_EMPLOYEE_HISTORY AS
SELECT
 HUB.EMPLOYEE_ID,
 PIT.PIT_EFF_DT START_DT,
 NVL(DATEADD(Day ,-1, PIT.PIT_END_DT), TO_DATE('12-31-9999', 'MM-DD-YYYY')) END_DT,
 CASE WHEN PIT.PIT_END_DT IS NULL THEN 'Y' ELSE 'N' END AS CURR_REC_IND,
 S1.LOCATION_CODE,
 S1.LOCATION_NAME,
 S2.SALARY_AMOUNT,
 S2.SALARY_CURRENCY,
 S3.ZIP_CODE,
 S4.Certification
FROM PKV_DEMO.EMPLOYEE_PIT PIT
JOIN PKV_DEMO.EMPLOYEE_HUB HUB ON (HUB.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY)
LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = PIT.EMPLOYEE_LOCATION_LOAD_DT)
LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = PIT.EMPLOYEE_SALARY_LOAD_DT)
  LEFT JOIN PKV_DEMO.EMPLOYEE_ZIP_SAT S3
 ON (S3.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S3.LOAD_DT = PIT.EMPLOYEE_ZIP_LOAD_DT)
 LEFT JOIN PKV_DEMO.EMPLOYEE_Certification_SAT S4
 ON (S4.EMPLOYEE_ID_HASHKEY = PIT.EMPLOYEE_ID_HASHKEY AND S4.LOAD_DT = PIT.EMPLOYEE_Certification_LOAD_DT)
 WHERE PIT.PIT_EFF_DT <> NVL(PIT.PIT_END_DT, TO_DATE('12-31-9999', 'MM-DD-YYYY'));
 
 SELECT * FROM PKV_DEMO.V_EMPLOYEE_HISTORY ORDER BY 1, 2;
 
 
---=======================================================================================================================================---
---=========================    DEMO PART 4 (Vault Load Stats, can be extened for load reconciliation )     ==============================---
---=======================================================================================================================================---
 
 // Vault Last RUN Stats:
CREATE OR REPLACE VIEW PKV_DEMO.VAULT_LAST_RUN_STATS AS
SELECT 
INI.TABLE_NAME AS TABLE_NAME, 
PREV.LOAD_DATE AS LAST_LOAD_DATE,
INS.LOAD_DATE AS CURRENT_LOAD_DATE, 
INI.BEFORE_LOAD_COUNT AS LAST_LOAD_COUNT, 
(INI.BEFORE_LOAD_COUNT + INS.INSERTED_ROWS) AS CURRENT_LOAD_COUNT,
TRUNC(100 * (NVL(INS.INSERTED_ROWS,1) / NVL(REPLACE(INI.BEFORE_LOAD_COUNT,0,1),1)))||' %' AS CHANGE_PERCENTAGE
FROM
(SELECT TABLE_NAME, LOAD_DATE, BEFORE_LOAD_COUNT FROM (
SELECT  
LOAD_TABLE AS TABLE_NAME, 
LOG_TS AS LOAD_DATE, 
split_part(IMPACTED_COUNT, ':', -1) AS BEFORE_LOAD_COUNT, 
row_number() over (partition by LOAD_TABLE order by LOG_TS DESC) as rank
FROM PKV_DEMO.VAULT_LOG_TABLE WHERE LOG_MSG LIKE 'START%' ) A
WHERE rank = 1 ) INI
INNER JOIN
(SELECT TABLE_NAME, LOAD_DATE, INSERTED_ROWS FROM (
SELECT  
LOAD_TABLE AS TABLE_NAME, 
LOG_TS AS LOAD_DATE, 
split_part(IMPACTED_COUNT, ':', -1) AS INSERTED_ROWS, 
row_number() over (partition by LOAD_TABLE order by LOG_TS DESC) as rank
FROM PKV_DEMO.VAULT_LOG_TABLE WHERE LOG_MSG LIKE 'END%' ) A
WHERE rank = 1 ) INS
ON INI.TABLE_NAME = INS.TABLE_NAME 
LEFT JOIN
(SELECT TABLE_NAME, LOAD_DATE, INSERTED_ROWS FROM (
SELECT  
LOAD_TABLE AS TABLE_NAME, 
LOG_TS AS LOAD_DATE, 
split_part(IMPACTED_COUNT, ':', -1) AS INSERTED_ROWS, 
row_number() over (partition by LOAD_TABLE order by LOG_TS DESC) as rank
FROM PKV_DEMO.VAULT_LOG_TABLE WHERE LOG_MSG LIKE 'END%' ) A
WHERE rank = 2 ) PREV
ON INI.TABLE_NAME = PREV.TABLE_NAME;

SELECT * FROM PKV_DEMO.VAULT_LAST_RUN_STATS WHERE TABLE_NAME NOT LIKE '%PIT';