// CREATE SCHEMA:
--create schema PKV_DEMO;

// CREATE EMPLOYEE_STG TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_STG (
EMPLOYEE_ID VARCHAR,
LOAD_DT DATE,
LOCATION_CODE VARCHAR,
LOCATION_NAME VARCHAR,
SALARY_AMOUNT INTEGER,
SALARY_CURRENCY VARCHAR,
SOURCE_NAME VARCHAR);

// CREATE EMPLOYEE_HUB TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_HUB (
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
LOAD_DT DATE,
SOURCE_NAME VARCHAR);

// CREATE EMPLOYEE_LOCATION_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT (
EMPLOYEE_LOCATION_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
LOCATION_CODE VARCHAR,
LOCATION_NAME VARCHAR,
LOAD_DT DATE,
SOURCE_NAME VARCHAR);

// CREATE EMPLOYEE_SALARY_SAT TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.EMPLOYEE_SALARY_SAT (
EMPLOYEE_SALARY_HASHKEY VARCHAR,
EMPLOYEE_ID_HASHKEY VARCHAR,
EMPLOYEE_ID VARCHAR,
SALARY_AMOUNT INTEGER,
SALARY_CURRENCY VARCHAR,
LOAD_DT DATE,
SOURCE_NAME VARCHAR);

--=========================================================================---

// CREATE METADATA TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.VAULT_METADATA_TABLE (
LOAD_TABLE VARCHAR,
TABLE_TGT VARCHAR,
TABLE_SRC VARCHAR,
TABLE_TYP VARCHAR,
TABLE_SQL VARCHAR,
LOAD_FLAG VARCHAR,
LOAD_SEQ NUMBER,
RUN_FLAG VARCHAR);

// CREATE SEQUENCE FOR LOGGING:
CREATE OR REPLACE SEQUENCE PKV_DEMO.VAULT_LOG_SEQ START = 1 INCREMENT = 1;
//CREATE LOG TABLE:
CREATE OR REPLACE TABLE PKV_DEMO.VAULT_LOG_TABLE (
LOG_ID INTEGER,
LOAD_TABLE VARCHAR,
LOG_MSG VARCHAR,
IMPACTED_COUNT VARCHAR,
LOG_FLAG VARCHAR,
LOG_TS TIMESTAMP);

--=========================================================================---

// METADATA INSERTS:
INSERT INTO PKV_DEMO.VAULT_METADATA_TABLE VALUES
('EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_STG', 'HUB',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM PKV_DEMO.EMPLOYEE_HUB TGT
  WHERE TGT.EMPLOYEE_ID_HASHKEY = EMPLOYEE_ID_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_HUB (EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_ID_HASHKEY_SRC, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME )
  SELECT DISTINCT
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY_SRC,
  EMPLOYEE_ID,
  LOAD_DT, 
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''ABC'' ',
 'Y', 1, 'Y'),
 
 ('EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_STG', 'HUB',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM PKV_DEMO.EMPLOYEE_HUB TGT
  WHERE TGT.EMPLOYEE_ID_HASHKEY = EMPLOYEE_ID_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_HUB (EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_ID_HASHKEY_SRC, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME )
  SELECT DISTINCT
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY_SRC,
  EMPLOYEE_ID,
  LOAD_DT,
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''PQR'' ',
 'N', 2, 'Y'),
 
 ('EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_HUB', 'PKV_DEMO.EMPLOYEE_STG', 'HUB',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM PKV_DEMO.EMPLOYEE_HUB TGT
  WHERE TGT.EMPLOYEE_ID_HASHKEY = EMPLOYEE_ID_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_HUB (EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_ID_HASHKEY_SRC, EMPLOYEE_ID, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY_SRC,
  EMPLOYEE_ID,
  LOAD_DT,
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''XYZ'' ',
 'Y', 3, 'Y'),
 
 ('EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_LOCATION_HASHKEY,
  NVL(LEAD(EMPLOYEE_LOCATION_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_LOCATION_HASHKEY) AS EMPLOYEE_LOCATION_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT) TGT
  WHERE TGT.EMPLOYEE_LOCATION_HASHKEY = EMPLOYEE_LOCATION_HASHKEY_SRC AND TGT.EMPLOYEE_LOCATION_HASHKEY_PREV = EMPLOYEE_LOCATION_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_LOCATION_SAT (EMPLOYEE_LOCATION_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_LOCATION_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(LOCATION_CODE), ''''), ''^'', NVL(UPPER(LOCATION_NAME), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_LOCATION_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  LOCATION_CODE,
  LOCATION_NAME,
  LOAD_DT,
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''ABC''',
 'Y', 1, 'Y'),
 
  ('EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_LOCATION_HASHKEY,
  NVL(LEAD(EMPLOYEE_LOCATION_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_LOCATION_HASHKEY) AS EMPLOYEE_LOCATION_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT) TGT
  WHERE TGT.EMPLOYEE_LOCATION_HASHKEY = EMPLOYEE_LOCATION_HASHKEY_SRC AND TGT.EMPLOYEE_LOCATION_HASHKEY_PREV = EMPLOYEE_LOCATION_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_LOCATION_SAT (EMPLOYEE_LOCATION_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_LOCATION_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(LOCATION_CODE), ''''), ''^'', NVL(UPPER(LOCATION_NAME), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_LOCATION_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  LOCATION_CODE,
  LOCATION_NAME,
  LOAD_DT,
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''PQR''',
 'N', 2, 'Y'),
 
  ('EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_LOCATION_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_LOCATION_HASHKEY,
  NVL(LEAD(EMPLOYEE_LOCATION_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_LOCATION_HASHKEY) AS EMPLOYEE_LOCATION_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT) TGT
  WHERE TGT.EMPLOYEE_LOCATION_HASHKEY = EMPLOYEE_LOCATION_HASHKEY_SRC AND TGT.EMPLOYEE_LOCATION_HASHKEY_PREV = EMPLOYEE_LOCATION_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_LOCATION_SAT (EMPLOYEE_LOCATION_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_LOCATION_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOCATION_CODE, LOCATION_NAME, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(LOCATION_CODE), ''''), ''^'', NVL(UPPER(LOCATION_NAME), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_LOCATION_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  LOCATION_CODE,
  LOCATION_NAME,
  LOAD_DT,
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''XYZ''',
 'Y', 3, 'Y'),
 
  ('EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_SALARY_HASHKEY,
  NVL(LEAD(EMPLOYEE_SALARY_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_SALARY_HASHKEY) AS EMPLOYEE_SALARY_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_SALARY_SAT) TGT
  WHERE TGT.EMPLOYEE_SALARY_HASHKEY = EMPLOYEE_SALARY_HASHKEY_SRC AND TGT.EMPLOYEE_SALARY_HASHKEY_PREV = EMPLOYEE_SALARY_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_SALARY_SAT (EMPLOYEE_SALARY_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_SALARY_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(SALARY_AMOUNT), ''''), ''^'', NVL(UPPER(SALARY_CURRENCY), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_SALARY_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  SALARY_AMOUNT,
  SALARY_CURRENCY,
  LOAD_DT, 
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''ABC''',
 'Y', 1, 'Y'),
 
   ('EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_SALARY_HASHKEY,
  NVL(LEAD(EMPLOYEE_SALARY_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_SALARY_HASHKEY) AS EMPLOYEE_SALARY_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_SALARY_SAT) TGT
  WHERE TGT.EMPLOYEE_SALARY_HASHKEY = EMPLOYEE_SALARY_HASHKEY_SRC AND TGT.EMPLOYEE_SALARY_HASHKEY_PREV = EMPLOYEE_SALARY_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_SALARY_SAT (EMPLOYEE_SALARY_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_SALARY_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(SALARY_AMOUNT), ''''), ''^'', NVL(UPPER(SALARY_CURRENCY), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_SALARY_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  SALARY_AMOUNT,
  SALARY_CURRENCY,
  LOAD_DT, 
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''PQR''',
 'Y', 2, 'Y'),
 
   ('EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_SALARY_SAT', 'PKV_DEMO.EMPLOYEE_STG', 'SAT',  
 ' INSERT ALL WHEN (
  SELECT COUNT (*) FROM 
  (SELECT EMPLOYEE_SALARY_HASHKEY,
  NVL(LEAD(EMPLOYEE_SALARY_HASHKEY) OVER (PARTITION BY EMPLOYEE_ID_HASHKEY, SOURCE_NAME ORDER BY LOAD_DT),EMPLOYEE_SALARY_HASHKEY) AS EMPLOYEE_SALARY_HASHKEY_PREV
  FROM PKV_DEMO.EMPLOYEE_SALARY_SAT) TGT
  WHERE TGT.EMPLOYEE_SALARY_HASHKEY = EMPLOYEE_SALARY_HASHKEY_SRC AND TGT.EMPLOYEE_SALARY_HASHKEY_PREV = EMPLOYEE_SALARY_HASHKEY_SRC) = 0
  THEN INTO PKV_DEMO.EMPLOYEE_SALARY_SAT (EMPLOYEE_SALARY_HASHKEY, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  VALUES (EMPLOYEE_SALARY_HASHKEY_SRC, EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, SALARY_AMOUNT, SALARY_CURRENCY, LOAD_DT, SOURCE_NAME)
  SELECT DISTINCT
  MD5(CONCAT(NVL(UPPER(EMPLOYEE_ID), ''''), ''^'', NVL(UPPER(SALARY_AMOUNT), ''''), ''^'', NVL(UPPER(SALARY_CURRENCY), ''''), ''^'', NVL(UPPER(SOURCE_NAME), ''''))) AS EMPLOYEE_SALARY_HASHKEY_SRC,
  MD5(NVL(UPPER(EMPLOYEE_ID), '''')) AS EMPLOYEE_ID_HASHKEY,
  EMPLOYEE_ID,
  SALARY_AMOUNT,
  SALARY_CURRENCY,
  LOAD_DT, 
  SOURCE_NAME
  FROM PKV_DEMO.EMPLOYEE_STG WHERE SOURCE_NAME = ''XYZ''',
 'Y', 2, 'Y'),
 
('EMPLOYEE_PIT', 'PKV_DEMO.EMPLOYEE_PIT', 'PKV_DEMO.EMPLOYEE_STG', 'PIT',
 ' INSERT INTO PKV_DEMO.EMPLOYEE_PIT
(EMPLOYEE_ID_HASHKEY,
 EMPLOYEE_ID,
 PIT_EFF_DT,
 PIT_END_DT,
 EMPLOYEE_LOCATION_LOAD_DT,
 EMPLOYEE_SALARY_LOAD_DT)
 WITH LOAD_DATES AS (
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT
 UNION 
 SELECT EMPLOYEE_ID_HASHKEY, EMPLOYEE_ID, LOAD_DT FROM PKV_DEMO.EMPLOYEE_SALARY_SAT)
 SELECT
 LD.EMPLOYEE_ID_HASHKEY,
 LD.EMPLOYEE_ID,
 LD.LOAD_DT AS PIT_EFF_DT,
 LEAD(LD.LOAD_DT) OVER  (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS PIT_END_DT,
 MAX(S1.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_LOCATION_LOAD_DT,
 MAX(S2.LOAD_DT) OVER (PARTITION BY LD.EMPLOYEE_ID_HASHKEY ORDER BY LD.LOAD_DT) AS EMPLOYEE_SALARY_LOAD_DT
 FROM LOAD_DATES LD
 LEFT JOIN PKV_DEMO.EMPLOYEE_LOCATION_SAT S1
 ON (S1.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S1.LOAD_DT = LD.LOAD_DT)
 LEFT JOIN PKV_DEMO.EMPLOYEE_SALARY_SAT S2
 ON (S2.EMPLOYEE_ID_HASHKEY = LD.EMPLOYEE_ID_HASHKEY AND S2.LOAD_DT = LD.LOAD_DT) ',
 'Y', 1, 'Y') ;
 
SELECT * FROM PKV_DEMO.VAULT_METADATA_TABLE;

--=========================================================================---

// REUSABLE PROCEDURE:
CREATE OR REPLACE PROCEDURE PKV_DEMO.VAULT_LOAD_PROC (LOAD_TABLE VARCHAR)
    returns string
    language javascript
    strict
    execute as CALLER
    as
    $$
/*
    Date Created: Dec 31 2020
    Created by: Praveen K Verma
    Description: 
    This Procedure will perform the data load in SnowFlake tables and capture the log steps with stats
    Log entries and Load stats can be found in table PKV_DEMO.vault_log_table
    Metadata entries can be found in table PKV_DEMO.vault_metadata_table
*/


// Check if load_table entry exist in metadata table:
  sql_cmd = " SELECT COUNT (*) FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "'";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue(1);
      if (row_count == 0)
      {
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'ERROR: No entry for " +LOAD_TABLE+ " in PKV_DEMO.VAULT_METADATA_TABLE', 'N/A', 'E', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      
// To Fail ControlM Job:
  sql_cmd = " SELECT * FROM WHERE 1=2" ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count_1 = rs.getColumnValue (1);
  return "Failed " ;
      }

// Update RUN_FLAG in metadata table:
  sql_cmd = " UPDATE PKV_DEMO.VAULT_METADATA_TABLE SET RUN_FLAG = 'N' WHERE LOAD_TABLE = '" +LOAD_TABLE+ "'";
  snowflake.execute( {sqlText: sql_cmd} );

      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'UPDATED: RUN_FLAG as N for " +LOAD_TABLE+ " in PKV_DEMO.VAULT_METADATA_TABLE', 'N/A', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );


// Check if all inserts has been executed:
  sql_cmd = " SELECT COUNT (*) FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "' AND RUN_FLAG = 'N'";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count_loop = rs.getColumnValue(1);
    while (row_count_loop!=0)  
    {
    
    sql_cmd = " SELECT COUNT (*) FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "' AND RUN_FLAG = 'N'";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue(1);
      
  if (rs.getColumnValue(1) == '0')
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'COMPLETED: ALL INSERT EXECUTED for " +LOAD_TABLE+ "', 'N/A', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      return "Succeeded" ;   
}
  
    
// Get the details from metadata table based on load_table name:
  sql_cmd = " SELECT TABLE_TGT, TABLE_SRC, UPPER(TABLE_TYP) AS TABLE_TYP, TABLE_SQL, UPPER(LOAD_FLAG) AS LOAD_FLAG, LOAD_SEQ FROM (SELECT TABLE_TGT, TABLE_SRC, TABLE_TYP, TABLE_SQL, LOAD_FLAG, LOAD_SEQ, RANK () OVER (PARTITION BY LOAD_TABLE ORDER BY LOAD_SEQ) AS RANK FROM PKV_DEMO.VAULT_METADATA_TABLE WHERE LOAD_TABLE = '" +LOAD_TABLE+ "' AND RUN_FLAG = 'N') WHERE RANK = 1" ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var TABLE_TGT = rs.getColumnValue (1);
  var TABLE_SRC = rs.getColumnValue (2);
  var TABLE_TYP = rs.getColumnValue (3);
  var TABLE_SQL = rs.getColumnValue (4); 
  var LOAD_FLAG = rs.getColumnValue (5); 
  var LOAD_SEQ  = rs.getColumnValue (6);
  
// Check if LOAD_FLAG in metadata table set to N:
  if (LOAD_FLAG == 'N')
    {
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'EXCLUDED: LOAD_FLAG in PKV_DEMO.VAULT_LOG_TABLE set to N for " +LOAD_TABLE+ ", LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "' , 'N/A', 'W', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      //return "Succeeded" ;
   // Update RUN_FLAG in metadata table:
  sql_cmd = " UPDATE PKV_DEMO.VAULT_METADATA_TABLE SET RUN_FLAG = 'Y' WHERE LOAD_TABLE = '" +LOAD_TABLE+ "' AND LOAD_SEQ = " +LOAD_SEQ+ " ";
  snowflake.execute( {sqlText: sql_cmd} ); 
    }
    
  else
  {
    { 
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'SELECTED: " +LOAD_TABLE+ " for data load, LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "' , 'N/A' , 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );

// Check if EMPLOYEE_ID exist in HUB table for SATTELITE table load:
if (TABLE_TYP == 'SAT')
{
  sql_cmd = " SELECT COUNT (*) FROM (SELECT DISTINCT EMPLOYEE_ID FROM " +TABLE_SRC+ " WHERE UPPER(EMPLOYEE_ID) NOT IN (SELECT UPPER(EMPLOYEE_ID) FROM PKV_DEMO.EMPLOYEE_HUB)) " ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);
if (row_count != 0)
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'WARNING: ALL or FEW EMP_ID not present in EMPLOYEE_HUB table for current load, LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "' , 'Missing EMP_ID Count: " +row_count+ "', 'W', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
else
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'PASSED: ALL EMP_ID present in EMPLOYEE_HUB table for current load, LOAD_SEQ: " +LOAD_SEQ+ ",  TABLE TYPE: " +TABLE_TYP+ "' , 'N/A' , 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
}
else
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'N/A: EMP_ID pre-existence in EMPLOYEE_HUB table is not required for current load, LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "', 'N/A', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
}
// Actual Data Load and Load Stats Collection:
      try
{

// Before Load Row Count in Target Table:
sql_cmd = "SELECT COUNT (*) FROM "+TABLE_TGT+" ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var pre_load_count = rs.getColumnValue (1);
  
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'START: Data load for " +TABLE_TGT+ ", LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "', 'Initial Row Count: " +pre_load_count+ "', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
  
 // Actual Data Load:
 snowflake.execute( {sqlText: TABLE_SQL} );
 
// After Load Row Count in Target Table:
sql_cmd = "SELECT COUNT (*) FROM "+TABLE_TGT+" ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var post_load_count = rs.getColumnValue (1);
  
// Net Load Row Count in Target Table:
sql_cmd = "SELECT " +post_load_count+ " - " +pre_load_count+ " ";
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);

      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'END: Data load for " +TABLE_TGT+ ", LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "', 'Added Row Count: " +row_count+ "', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );
      //return "Succeeded" ;
      
    // Update RUN_FLAG in metadata table:
  sql_cmd = " UPDATE PKV_DEMO.VAULT_METADATA_TABLE SET RUN_FLAG = 'Y' WHERE LOAD_TABLE = '" +LOAD_TABLE+ "' AND LOAD_SEQ = " +LOAD_SEQ+ " ";
  snowflake.execute( {sqlText: sql_cmd} );  

      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'UPDATED: RUN_FLAG as Y for " +LOAD_TABLE+ " FOR LOAD_SEQ: " +LOAD_SEQ+ " in PKV_DEMO.VAULT_METADATA_TABLE', 'Final Row Count: " +post_load_count+ "', 'I', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );  
      
      }
           
// Error Collection:
catch (err)
{
      sql_cmd = " INSERT INTO PKV_DEMO.VAULT_LOG_TABLE VALUES (PKV_DEMO.VAULT_LOG_SEQ.NEXTVAL, '" +LOAD_TABLE+ "', 'FAIL: Data load for " +TABLE_TGT+ ", LOAD_SEQ: " +LOAD_SEQ+ ", TABLE TYPE: " +TABLE_TYP+ "', 'N/A' , 'E', CURRENT_TIMESTAMP) ";
      snowflake.execute( {sqlText: sql_cmd} );

// To Fail ControlM Job:
  sql_cmd = " SELECT * FROM WHERE 1=2" ;
  var stmt = snowflake.createStatement ( {sqlText: sql_cmd} );
  var rs = stmt.execute ();
  rs.next();
  var row_count = rs.getColumnValue (1);
  
      return "Failed: " + err ;
      }
      }
      }
      }
      $$
      ;

---=======================================================================================================================================---

//Truncate any existing data before Day 1:
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_HUB ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_SALARY_SAT ; 
TRUNCATE TABLE PKV_DEMO.VAULT_LOG_TABLE ;
//MetaData Table Entry:
SELECT * FROM PKV_DEMO.VAULT_METADATA_TABLE ;

---=======================================================================================================================================---
---=========================       DEMO PART 1 (Advantage of having Reusable Process & Logging Steps)        ==============================---
---=======================================================================================================================================---

// CASE 1: Load Day 1 Data from Staging table to Vault tables:
// Day 1: Jan 01 2021 :: Data in Staging Layer
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_STG;
INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 3000, 'USD', 'ABC'),
('A124', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 4000, 'USD', 'ABC'),
('A125', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NY', 'NEWYORK', 5000, 'USD', 'ABC');

INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NJ', 'NEWYORK', 3000, 'USDD', 'PQR'),
('A124', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NJ', 'NEWYORK', 4000, 'USDD','PQR'),
('A125', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'NJ', 'NEWYORK', 5000, 'USDD','PQR');

INSERT INTO  PKV_DEMO.EMPLOYEE_STG VALUES 
('A123', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'CA', 'NEWYORK', 3000, 'USSD','XYZ'),
('A124', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'CA', 'NEWYORK', 4000, 'USSD','XYZ'),
('A125', TO_DATE('01-01-2021', 'MM-DD-YYYY'), 'CA', 'NEWYORK', 5000, 'USSD','XYZ');
// Reusable Procedure Call Statement to load data:
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_PIT;
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_PIT');
--case 1
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_HUB');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_LOCATION_SAT');
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_SALARY_SAT');
TRUNCATE TABLE PKV_DEMO.EMPLOYEE_PIT;
CALL PKV_DEMO.VAULT_LOAD_PROC ('EMPLOYEE_PIT');
--case 2
CALL PKV_DEMO.VAULT_LOAD_PROC ('test1');


// Log Table Entry:
SELECT * FROM PKV_DEMO.VAULT_LOG_TABLE ORDER BY LOG_ID;
//Select statements:
SELECT * FROM PKV_DEMO.EMPLOYEE_HUB ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_LOCATION_SAT ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_SALARY_SAT ; 
SELECT * FROM PKV_DEMO.EMPLOYEE_PIT ; 
